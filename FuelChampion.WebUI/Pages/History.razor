@page "/history"
@using GemBox.Spreadsheet
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]


<PageTitle>Moje tankowania</PageTitle>
<h3>Moje tankowania</h3>

@if (invoices is null)
{
    <span>Ładowanie danych...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Stacja paliw</th>
                <th>Data</th>
                <th>Ilość w litrach</th>
                <th>Rodzaj paliwa</th>
                <th>Cena za litr</th>
                <th>Cena całkowita</th>
                <th>Samochód</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in invoices)
            {
                <tr>
                    <td>@i.GasStationName</td>
                    <td>@i.RefuelingDate.ToString("dd.MM.yyyy HH:mm")</td>
                    <td>@i.RefueledLitersAmount</td>
                    <td>@i.FuelType.ToDescription()</td>
                    <td>@i.PricePerLiter.ToStringPLN()</td>
                    <td>@i.TotalPrice.ToStringPLN()</td>
                    <td>@i.CarRegistrationNumber?.ToUpper()</td>

                    <td>
                        <button @onclick="() => EditInvoice(i.Invoice_id)" class="btn btn-secondary">
                            Edytuj
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
}
<p>
    <button @onclick="AddNewInvoice" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-node-plus-fill" viewBox="0 0 16 16">
            <path d="M11 13a5 5 0 1 0-4.975-5.5H4A1.5 1.5 0 0 0 2.5 6h-1A1.5 1.5 0 0 0 0 7.5v1A1.5 1.5 0 0 0 1.5 10h1A1.5 1.5 0 0 0 4 8.5h2.025A5 5 0 0 0 11 13m.5-7.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2a.5.5 0 0 1 1 0" />
        </svg>
        Dopisz
    </button>
    <button class="btn btn-success float-end mx-5" @onclick="@ImportToExcel">Importuj do EXCEL</button>
</p>

<script>
    function openFile(dataUrl) {
    const newWindow = window.open();
    if (newWindow) {
    newWindow.document.write(`<iframe src="${dataUrl}" frameborder="0" style="width:100%;height:100%;"></iframe>`);
    } else {
    alert("Nie można otworzyć nowego okna. Upewnij się, że wyskakujące okna są dozwolone.");
    }
    }
</script>

@code {
    private List<InvoiceView> invoices = new();



    protected override async Task OnInitializedAsync()
    {
        var userId = await (AuthStateProvider as CustomAuthenticationStateProvider)!.GetUserId();
        invoices = await ApiService.GetAsync<List<InvoiceView>>($"/Invoice/InvoicesView/{userId.ToString()}");
    }

    private async Task AddNewInvoice() => NavigationManager.NavigateTo("/invoice");
    private void EditInvoice(int id) => NavigationManager.NavigateTo($"/invoice/{id}");

    public async void ImportToExcel()
    {
        var workbook = new ExcelFile();
        var sheet = workbook.Worksheets.Add("Sheet 1");

        sheet.Cells["A1"].Value = "Stacja paliw";
        sheet.Cells["B1"].Value = "Data";
        sheet.Cells["C1"].Value = "Ilość w litrach";
        sheet.Cells["D1"].Value = "Rodzaj paliwa";
        sheet.Cells["E1"].Value = "Cena za litr";
        sheet.Cells["F1"].Value = "Cena całkowita";
        sheet.Cells["G1"].Value = "Samochód";

        for (int i = 0; i < invoices.Count(); i++)
        {
            var invoice = invoices[i];
            int cellIndex = i + 2;
            sheet.Cells["A" + cellIndex].Value = invoice.GasStationName;
            sheet.Cells["B" + cellIndex].Value = invoice.RefuelingDate.ToString("dd.MM.yyyy HH:mm");
            sheet.Cells["C" + cellIndex].Value = invoice.RefueledLitersAmount;
            sheet.Cells["D" + cellIndex].Value = invoice.FuelType.ToDescription();
            sheet.Cells["E" + cellIndex].Value = invoice.PricePerLiter.ToStringPLN();
            sheet.Cells["F" + cellIndex].Value = invoice.TotalPrice.ToStringPLN();
            sheet.Cells["G" + cellIndex].Value = invoice.CarRegistrationNumber?.ToUpper();
        }


        using var stream = new MemoryStream();
        workbook.Save(stream, SaveOptions.XlsxDefault);
        await OpenFileFromStream(stream);
    }

    private async Task OpenFileFromStream(MemoryStream inputStream)
    {
        var base64 = Convert.ToBase64String(inputStream.ToArray());
        var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";//"text/plain"; // Zmień typ MIME, jeśli potrzebujesz np. application/pdf
        var dataUrl = $"data:{mimeType};base64,{base64}";
        await JSRuntime.InvokeVoidAsync("openFile", dataUrl);
    }
}
