@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@page "/Logowanie"
@using Newtonsoft.Json

<PageTitle>Logowanie</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4  border">
        <EditForm Model="User" OnValidSubmit="HandleSubmit" FormName="LoginForm">
            <h3>Logowanie</h3>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="login">Nazwa użytkownika:</label>
                <InputText id="login" @bind-Value="User.UserName" class="form-control" />
                <ValidationMessage For="() => User.UserName"></ValidationMessage>
            </div>
            <div class ="mb-3">
                <label for="password">Hasło:</label>
                <InputText type="password" id="password" @bind-Value="User.Password" class="form-control" />
                <ValidationMessage For="() => User.Password"></ValidationMessage>
            </div> <br />
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <button type="submit" class="btn btn-primary">Logowanie</button>
            <ValidationSummary class="text-danger"></ValidationSummary>
        </EditForm>
    </div>
</div>


@code {
    public LoginDto User = new LoginDto();
    public int? Id { get; set; }
    private string? errorMessage;

    private async Task Authenticate()
    {
        // var userAccount = ApiService.GetAsync("/user");
    }

    async Task HandleSubmit()
    {
        // HttpContent httpContent = JsonContent.Create(User);
        errorMessage = null;
        await ApiService.PostAsJsonAsyncHttpResponse<LoginDto>("/UserLogin", User).ContinueWith(async x =>
        {
            if (x.Result.IsSuccessStatusCode)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                string response = await x.Result.Content.ReadAsStringAsync();
                var loginResponse = JsonConvert.DeserializeObject<NewUserDTO>(response);
                customAuthStateProvider.UpdateAuthenticationState(loginResponse?.Token);
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                // todo: komunikaty
                // errorMessage = x.Result.Content.ToString();
            }
        });

        //     await ApiService.PostAsJsonAsync<LoginDto>("/UserLogin", User).ContinueWith(async x =>
        // {
        // if (x.IsCompleted)
        // {
        //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        //     await customAuthStateProvider.UpdateAuthenticationState(x.Result.Content.Headers.ToString());
        //     NavigationManager.NavigateTo("/", forceLoad: true);
        // }
        // else
        // {
        //     // todo: komunikaty
        //     // errorMessage = x.Result.Content.ToString();
        // }
        // });


        // var result = await ApiService.PostAsJsonAsync("/UserLogin", User);
        // if (result)
        // {
            
        // }
        // HttpContent httpContent = JsonContent.Create(User);
        // await ApiService.PostAsJsonAsync("/UserLogin", User);
        // await ApiService.PostAsync("/UserLogin", User);
    }
}
